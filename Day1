Problem-1: https://leetcode.com/problems/maximum-subarray/

class Solution {
    public int maxSubArray(int[] nums) {
        int n = nums.length;
        int curSum = 0;
        int obtSum = 0;
        boolean flag = true;
        
        for(int i = 0; i < n; i++) {
            if(nums[i] > 0)
                flag = false;
            
            curSum += nums[i];
            
            if(curSum < 0) {
                curSum = 0;
            }
            
            if(curSum > obtSum){
                obtSum = curSum;
            }
        }
        
        int negMax = Integer.MIN_VALUE;
        
        if(flag){
            
            for(int i = 0; i < n; i++) {
                negMax = Math.max(negMax, nums[i]);
            }
            
            return negMax;
        } 
        
        return obtSum;
    }
}

Problem-2: https://leetcode.com/problems/contains-duplicate/

class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashSet<Integer> set = new HashSet<>();
        
        for(int v: nums){
            if(set.contains(v)){
                return true;
            } else {
                set.add(v);
            }
        }
        
        return false;
    }
}

Problem-3: https://practice.geeksforgeeks.org/problems/chocolate-distribution-problem3825/1/

class Solution
{
    public long findMinDiff (ArrayList<Integer> a, int n, int m)
    {
        // your code here
        Collections.sort(a);
        
        long minDiff = Long.MAX_VALUE;
        
        for(int i = 0; i + m - 1 < n; i++){
            minDiff = Math.min(a.get(i + (int)m - 1) - a.get(i), minDiff);
        }
        return minDiff;
    }
}

Problem-4: https://practice.geeksforgeeks.org/problems/search-in-a-rotated-array4618/1/

class Solution
{
    int search(int A[], int l, int h, int key)
    {
        // Complete this function
        int lo = 0;
        int hi = A.length - 1;
        
        while(lo <= hi) {
            int mid = lo + (hi - lo)/2;
            
            if(A[mid] == key){
                return mid;
            } else if(A[lo] <= A[mid]){
                // lo to mid is sorted
                if(key >= A[lo] && A[mid] > key){
                    hi = mid - 1;
                } else {
                    lo = mid + 1;
                } 
            } else if(A[mid] <= A[hi]){
                // mid to hi is sorted
                if(key > A[mid] && key <= A[hi]){
                    lo = mid + 1;
                } else {
                    hi = mid - 1;
                }
            }
        }
        
        return -1;
    }
}

Problem-5: https://leetcode.com/problems/next-permutation/

class Solution {
    public void nextPermutation(int[] nums) {
        int n = nums.length;
        int k = n - 2;
        
        // null check
        if(nums.length == 0 || nums == null)
            return;
        
        // find k
        for(int i = n-1; i > 0; i--){
            if(nums[i] <= nums[i - 1])
                k--;
            else
                break;
        }
        
         // if k == -1 then reverse
        if(k == -1){
            reverse(nums, 0, n - 1);
            return;
        }
        
        // else replace k with next greater element then reverse
        for(int i = n-1; i > 0; i--){
            if(nums[i] > nums[k]){
                 int temp = nums[i];
                 nums[i] = nums[k];
                 nums[k] = temp;
                 break;
            }
        }
        
        reverse(nums, k + 1, n - 1);
        
    }
    
    private void reverse(int[] nums, int lo, int hi){
        while(lo < hi){
            int temp = nums[lo];
            nums[lo] = nums[hi];
            nums[hi] = temp;
            lo++;
            hi--;
        }
    }
}

Problem-6: https://leetcode.com/problems/best-time-to-buy-and-sell-stock/

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        
        int[] maxfr = new int[n];
        maxfr[n-1] = prices[n-1];
        
        for(int i = n - 2; i >= 0; i--){
            maxfr[i] = Math.max(prices[i], maxfr[i + 1]);
        }
        
        int[] minfl = new int[n];
        minfl[0] = prices[0];
        
        for(int i = 1; i < n; i++){
            minfl[i] = Math.min(prices[i], minfl[i - 1]);
        }
        
        int maxProf = Integer.MIN_VALUE;
        
        for(int i = 0; i < n; i++){
            int diff = maxfr[i] - minfl[i];
            maxProf = Math.max(maxProf, diff);
        }
        
        return maxProf;
    }
}

Problem-7: https://practice.geeksforgeeks.org/problems/find-missing-and-repeating2512/1 

class Solve {
    int[] findTwoElement(int arr[], int n) {
        // code here
        int[] ans = new int[2];
        
        int nsum = 0;
        int orgSum = 0;
        
        for(int i = 0; i < n; i++){
            int orgEle = Math.abs(arr[i]);
            int idx = orgEle - 1;
            
            if(arr[idx] < 0){
                ans[0] = orgEle;
            }
            
            arr[idx] = -arr[idx];
            nsum += (i + 1);
            orgSum += orgEle;
        }
        
        ans[1] = nsum - (orgSum - ans[0]);
        
        return ans;
    }
}



