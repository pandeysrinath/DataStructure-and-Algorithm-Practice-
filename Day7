Problem-1: https://practice.geeksforgeeks.org/problems/smallest-window-in-a-string-containing-all-the-characters-of-another-string-1587115621/

class Solution
{
    //Function to find the smallest window in the string s consisting
    //of all the characters of string p.
    public static String smallestWindow(String s, String p){
        // Your code here
        String ans = "";
        
        HashMap<Character, Integer> map2 = new HashMap<>();
        
        for(int i = 0; i < p.length(); i++){
            char ch = p.charAt(i);
            map2.put(ch, map2.getOrDefault(ch, 0) + 1);
        }
        
        int mct = 0;
        int dmct = p.length();
        
        HashMap<Character, Integer> map1 = new HashMap<>();
        int i = -1;
        int j = -1;
        
        while(true){
            boolean f1 = false, f2 = false;
            
            // Acquire
            while(i < s.length() - 1 && mct < dmct){
                i++;
                char ch = s.charAt(i);
                map1.put(ch, map1.getOrDefault(ch, 0) + 1);
                
                if(map1.getOrDefault(ch, 0) <= map2.getOrDefault(ch, 0)){
                    mct++;
                }
                
                f1 = true; 
            }
            
            // Collect answer and release
            while(j < i && mct == dmct){
                
                String pans = s.substring(j + 1, i + 1);
                
                if(ans.length() == 0 || pans.length() < ans.length()){
                    ans = pans;
                }
                
                j++;
                
                char ch = s.charAt(j);
                
                if(map1.get(ch) == 1){
                    map1.remove(ch);
                } else {
                    map1.put(ch, map1.get(ch) - 1);
                }
                
                if(map1.getOrDefault(ch, 0) < map2.getOrDefault(ch, 0)){
                    mct--;
                }
                
                f2 = true;
            }
            
            if(f1 == false && f2 == false){
                break;
            }
        }
        
        if(ans.length() == 0)
            return "-1";
            
        return ans;
    }
}

Problem-2: https://practice.geeksforgeeks.org/problems/wildcard-string-matching1126/1

class Solution{
    static boolean match(String wild, String pattern)
    {
        //Using Dynamic programing (Diagonal Traversal of 2d matrix)
        boolean[][] dp = new boolean[wild.length() + 1][pattern.length() + 1];
        
        for(int i = dp.length - 1; i >= 0; i--){
            for(int j = dp[0].length - 1; j >= 0; j--){
                if(i == dp.length - 1 && j == dp[0].length - 1){
                    dp[i][j] = true;
                } else if(i == dp.length - 1){
                    dp[i][j] = false;
                } else if(j == dp[0].length - 1){
                    if(wild.charAt(i) == '*'){
                        dp[i][j] = dp[i + 1][j];
                    } else {
                        dp[i][j] = false;
                    }
                } else {
                    if(wild.charAt(i) == '?'){
                        dp[i][j] = dp[i + 1][j + 1];
                    } else if(wild.charAt(i) == '*'){
                        dp[i][j] = dp[i + 1][j] || dp[i][j + 1];
                    } else if(wild.charAt(i) == pattern.charAt(j)){
                        dp[i][j] = dp[i + 1][j + 1];
                    } else {
                        dp[i][j] = false;
                    }
                    
                }
            }
        }
        
        return dp[0][0];
    }
}