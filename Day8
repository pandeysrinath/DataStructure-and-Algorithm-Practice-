Problem-1: https://leetcode.com/problems/rotate-image/

class Solution {
    public void rotate(int[][] matrix) {
        transpose(matrix);
        
        for(int[] vector: matrix){
            reverse(vector);
        }
    }
    
    private void transpose(int[][] arr){
        for(int i = 0; i < arr.length; i++){
            for(int j = i; j < arr.length; j++){
                int temp = arr[i][j];
                arr[i][j] = arr[j][i];
                arr[j][i] = temp;
            }
        }
    }
    
    private void reverse(int[] arr){
        int lo = 0;
        int hi = arr.length - 1;
        
        while(lo < hi){
            int temp = arr[lo];
            arr[lo] = arr[hi];
            arr[hi] = temp;
            
            lo++;
            hi--;
        }
    }
}

Problem-2: https://leetcode.com/problems/word-search/

Problem-3: https://practice.geeksforgeeks.org/problems/find-the-number-of-islands/1/

Problem-4: https://practice.geeksforgeeks.org/problems/replace-os-with-xs0052/1/


Problem-5: https://www.geeksforgeeks.org/find-common-element-rows-row-wise-sorted-matrix/

import java.util.*;

public class CommonInRows {
    public static int findCommon(int[][] mat){
        HashMap<Integer, Integer> fmap = new HashMap<>();

        for(int i = 0; i < mat.length; i++){
            for (int j = 0; j < mat[0].length; j++){
                fmap.put(mat[i][j], fmap.getOrDefault(mat[i][j], 0) + 1);
            }
        }

        int ele = -1;

        for (int val: fmap.keySet()){
            if(fmap.get(val)  >= mat.length)
                ele = val;
        }

        return ele;
    }

    public static void main(String[] args) {
        int[][] mat = { { 1, 2, 3, 4, 5, 9 },
                        { 2, 4, 5, 8, 10, 9 },
                        { 3, 5, 7, 9, 11, 9 },
                        { 1, 3, 5, 7, 9, 9 },
                        { 2, 7, 6, 8, 9, 10 }};
        int result = findCommon(mat);
        if (result == -1)
            System.out.print("No common element");
        else
            System.out.print("Common element is " + result);
    }
}


Problem-6: https://www.geeksforgeeks.org/create-a-matrix-with-alternating-rectangles-of-0-and-x/

import java.util.*;

public class MatrixWithAlternating0andX {
    public static void generateAndPrintMatrix(int row, int clm) {
        char[][] matrix = new char[row][clm];

        int minRow = 0, minClm = 0, maxRow = row - 1, maxClm = clm - 1;

        int count = 0;
        int limit = row * clm;

        boolean flag = true;
        char val;

        while(count < limit) {
            if(flag){
                val = 'X';
            } else {
                val = '0';
            }

            for (int i = minRow, j = minClm; j <= maxClm && count < limit; j++) {
                matrix[i][j] = val;
                count++;
            }
            minRow++;

            for (int i = minRow, j = maxClm; i <= maxRow && count < limit; i++) {
                matrix[i][j] = val;
                count++;
            }
            maxClm--;

            for (int i = maxRow, j = maxClm; j >= minClm && count < limit; j--) {
                matrix[i][j] = val;
                count++;
            }
            maxRow--;

            for (int i = maxRow, j = minClm; i >= minRow && count < limit; i--) {
                matrix[i][j] = val;
                count++;
            }
            minClm++;

            flag = !flag;
        }

        for (char[] arr: matrix){
            for (char v: arr)
                System.out.print(v + " ");
            System.out.println();
        }
    }
    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int row = scn.nextInt();
        System.out.print("Enter the number of columns: ");
        int clm = scn.nextInt();

        generateAndPrintMatrix(row, clm);
    }
}




Problem-7: https://practice.geeksforgeeks.org/problems/max-rectangle/1/#

class Solution {
    
    public int maxArea(int M[][], int n, int m) {
        // add code here.
        int curRow[] = M[0];
        int maxArea = maxHistogram(curRow);
        
        for(int i = 1; i < M.length; i++){
            for(int j = 0; j < M[0].length; j++){
                if(M[i][j] == 1)
                    curRow[j] += 1;
                else
                    curRow[j] = 0;
            }
            
            int curMax = maxHistogram(curRow);
            maxArea = Math.max(curMax, maxArea);
        }
        
        return maxArea;
    }
    
    public int maxHistogram(int a[]){
        // your code here
        int n = a.length;
        int[] rb = new int[n];
        Stack<Integer> st = new Stack<>();
      
        for(int i = n - 1; i >= 0; i--) {
            while(!st.isEmpty() && a[i] <= a[st.peek()])
                st.pop();
    

            if(st.isEmpty()){
                rb[i] = n;
            } else {
                rb[i] = st.peek();
            }
    
            st.push(i);
        }

        int[] lb = new int[n];

        st = new Stack<>();

        for(int i = 0; i < n; i++) {
            
            while(!st.isEmpty() && a[i] <= a[st.peek()])
            st.pop();
    
            if(st.isEmpty()){
                lb[i] = -1;
            } else {
                lb[i] = st.peek();
            }
    
            st.push(i);
        }

      int maxArea = -1;

      for(int i = 0; i < n; i++) {
         int width = rb[i] - lb[i] - 1;
         int area = a[i] * width;
         maxArea = Math.max(maxArea, area);
      }
      
      return maxArea;

    }
}