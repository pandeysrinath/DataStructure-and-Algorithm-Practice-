Problem-1: https://leetcode.com/problems/longest-substring-without-repeating-characters/

class Solution {
    public int lengthOfLongestSubstring(String s) {
         // Approach-1 using Set
         if(S.length() == 0 && !S.equals("")){
            return 1;
        } 
        
        if(S.equals("")){
            return 0;
        }
        
        int left = 0, right = 0;
        int maxlen = 0;
        HashSet<Character> set = new HashSet<>();
        
        while(right < S.length()){
            if(!set.contains(S.charAt(right))){
                set.add(S.charAt(right));
                right++;
                maxlen = Math.max(maxlen, set.size());
            } else {
                set.remove(S.charAt(left));
                left++;
            }
        }
        
        return maxlen;
        
        // Aproach 2 using HashMap
        int n = s.length(), ans = 0;
        Map<Character, Integer> map = new HashMap<>(); // current index of character
        // try to extend the range [i, j]
        for (int j = 0, i = 0; j < n; j++) {
            if (map.containsKey(s.charAt(j))) {
                i = Math.max(map.get(s.charAt(j)), i);
            }
            ans = Math.max(ans, j - i + 1);
            map.put(s.charAt(j), j + 1);
        }
        return ans;
    }
}

Problem-2: https://leetcode.com/problems/longest-repeating-character-replacement/

class Solution {
    public int characterReplacement(String s, int k) {
        int[] charFreq = new int[26];
        int maxLen = 0;
        int maxCharCount = 0;
        
        int left = 0, right = 0;
        
        for(right = 0; right < s.length(); right++){
            char rightChar = s.charAt(right);
            charFreq[rightChar - 'A']++;
            maxCharCount = Math.max(maxCharCount, charFreq[rightChar - 'A']);
    
            while(right - left + 1 - maxCharCount > k){
                char leftChar = s.charAt(left);
                charFreq[leftChar - 'A']--;
                left++;   
            } 
    
            maxLen = Math.max(maxLen, right - left + 1);
        }
        
        return maxLen;
    }
}

Problem-3: https://leetcode.com/problems/group-anagrams/

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        HashMap<HashMap<Character, Integer>, ArrayList<String>> bmap = new HashMap<>();
        
        for(String str: strs){
            
            HashMap<Character, Integer> fmap = new HashMap<>();
            
            for(int i = 0; i < str.length(); i++){
                char ch = str.charAt(i);
                fmap.put(ch, fmap.getOrDefault(ch, 0) + 1);
            }
            
            if(bmap.containsKey(fmap)){
                ArrayList<String> lst = bmap.get(fmap);
                lst.add(str);
            } else {
                ArrayList<String> lst = new ArrayList<>();
                lst.add(str);
                bmap.put(fmap, lst);
            }
        }
        
        List<List<String>> res = new ArrayList<>();
        
        for(ArrayList<String> val: bmap.values()){
            res.add(val);
        }
        
        return res;
    }
}

Problem-4: https://leetcode.com/problems/longest-palindromic-substring/

class Solution {
    public String longestPalindrome(String s) {
        
        int start = 0, end = 0;
        
        for(int i = 0; i < s.length(); i++){
            int odd = expand(s,i,i);
            int even = expand(s,i,i+1);
            int len = Math.max(odd, even);
            
            if(len > end-start){
                //Even len (6)-> 2 start --> i-2, end -> i+3
                //Odd len (5) -> 2 start i-2, end -> i+2
                start = i - (len-1)/2;
                end = i + len/2;
            }
        }
        
        return s.substring(start, end + 1);
    }
    
    public int expand(String s, int left, int right){
        while(left >= 0 && right <s.length() && s.charAt(left) == s.charAt(right)){
            left--;
            right++;
        }
        return right-left-1; 
    }
}

Problem-5: https://leetcode.com/problems/palindromic-substrings/

class Solution {
    public int countSubstrings(String s) {
        
        //Using Dynamic programing (Diagonal Traversal of 2d matrix)
        boolean[][] dp = new boolean[s.length()][s.length()];
        int count = 0;
        
        for(int g = 0; g < s.length(); g++){
            
            for(int i = 0, j = g; j < dp.length; i++, j++){
                if(g == 0)
                    dp[i][j] = true;
                else if(g == 1)
                    dp[i][j] = s.charAt(i) == s.charAt(j);
                else{
                    if(s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1] == true){
                        dp[i][j] = true;
                    } else {
                        dp[i][j] = false;
                    }              
                }
                
                if(dp[i][j] == true)
                    count++;
            }
            
        }
        
        return count;
    }
}

Problem-6: https://practice.geeksforgeeks.org/problems/next-permutation5226/1

class Solution{
    static List<Integer> nextPermutation(int N, int nums[]){
        // code here
        int i = nums.length - 2;
        int j = 0;
        
        while(i >= 0 && nums[i] >= nums[i+1])
            i--;
        
        if(i >= 0){
            
            j = nums.length - 1;
            
            while(nums[j] <= nums[i])
                j--;
            
            swap(nums, i, j);
        }
        
        reverse(nums, i+1, nums.length - 1);
        ArrayList<Integer> list = new ArrayList<>();
        
        for (int index = 0; index < nums.length; index++) 
        {
           list.add(nums[index]);
        }
        
        return list;
    }
    
    
    public static void swap(int arr[], int i, int j){
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    
    public static void reverse(int arr[], int i, int j){
        while(i < j){
            swap(arr,i,j);
            i++;
            j--;
        }
    }

}

Problem-7: https://practice.geeksforgeeks.org/problems/count-palindromic-subsequences/1

class Solution
{
    //Using Dynamic programing (Diagonal Traversal of 2d matrix)
    
    long countPS(String str)
    {
        // Your code here
        int mod = 1000000007;
        
        int[][] dp = new int[str.length()][str.length()];
        
        for(int g = 0; g < str.length(); g++){
            
            for(int i = 0, j = g; j < str.length(); i++, j++){
                if(g == 0){
                    dp[i][j] = 1;
                } else if(g == 1){
                    dp[i][j] = str.charAt(i) == str.charAt(j) ? 3 : 2;
                } else {
                    if(str.charAt(i) == str.charAt(j)){
                        dp[i][j] = (dp[i][j - 1]  % mod + dp[i + 1][j]  % mod + 1) % mod;
                    } else {
                        dp[i][j] = (dp[i][j - 1]  % mod + dp[i + 1][j] % mod - dp[i + 1][j - 1] % mod) % mod;
                    }
                    
                    if(dp[i][j] < 0)
                        dp[i][j] += mod;
                }
            }
        }
        
        return dp[0][str.length() - 1];
    }
}