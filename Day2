Problem-1: https://leetcode.com/problems/kth-largest-element-in-an-array/

class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        
        int j = 0;
        
        while(j < k){
            pq.add(nums[j]);
            j++;
        }
        
        for(int i = k; i < nums.length; i++){
            if(nums[i] > pq.peek()){
                pq.poll();
                pq.add(nums[i]);
            }
        }
            
        return pq.peek();
    }
}

Problem-2: https://leetcode.com/problems/trapping-rain-water/

class Solution {
    public int trap(int[] height) {
        int n = height.length;
        
        int[] left = new int[n];
        left[0] = height[0];
        
        int[] right = new int[n];
        right[n-1] = height[n-1];
        
        for(int i = 1; i < n; i++){
            left[i] = Math.max(height[i], left[i-1]);
        }
        
         for(int i = n-2; i >= 0; i--){
            right[i] = Math.max(height[i], right[i+1]);
        }
        
        int maxWater = 0;
        
        for(int i = 0; i < n; i++){
            maxWater += Math.abs(Math.min(left[i],right[i]) - height[i]);
        }
        
        return maxWater;
    }
}

Problem-3: https://leetcode.com/problems/product-of-array-except-self/

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] res = new int[n];
        
        int prod = 1;
        
        int count = 0;
        
        boolean flag = false;
        
        for(int i = 0; i < n; i++) {
            if(nums[i] == 0){
                flag = true;
                count++;
                continue;
            }
            prod *= nums[i];
        }
        
        if(count > 1){
            
            for(int i = 0; i < n; i++){
                res[i] = 0;
            }

        } else {
            
            for(int i = 0; i < n; i++){
                if(nums[i] == 0)
                  res[i] = prod;
                 else if(flag == true){
                     res[i] = 0;
                 } else {
                  res[i] = prod/nums[i];
                }
            }
        }
        
        return res;
    }
}

Problem-4: https://leetcode.com/problems/maximum-product-subarray/

class Solution {
    public int maxProduct(int[] nums) {
        int ans = Integer.MIN_VALUE;
        boolean flag = false;
        int rProd = 1;
        int lProd = 1;
        
        for(int i = 0; i < nums.length; i++){
            
            rProd *= nums[i];
            ans = Math.max(ans, rProd);
            
            if(nums[i] == 0){
                //flag = true;
                rProd = 1;
            }
        }
        
        for(int i = nums.length - 1; i >= 0; i--){
            lProd *= nums[i];
            ans = Math.max(ans, lProd);
            
            if(nums[i] == 0){
                lProd = 1;
            }
        }
           
        return ans;
    }
}

Problem-5: https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/

class Solution {
    public int findMin(int[] nums) {
        int n = nums.length;
        int low = 0, high = n - 1;
        
        while(low < high) {
            int mid = low + (high - low) / 2;
            
            if(nums[mid] > nums[high])
                low = mid + 1;
            else
                high = mid;
        }
        return nums[high];
    }
}

Problem-6: https://leetcode.com/problems/search-in-rotated-sorted-array/

class Solution {
    public int search(int[] arr, int target) {
        int lo = 0;
        int hi = arr.length - 1;
        
        while(lo <= hi) {
            int mid = lo + (hi - lo)/2;
            
            if(arr[mid] == target){
                return mid;
            } else if(arr[lo] <= arr[mid]){
                // lo to mid is sorted
                if(target >= arr[lo] && arr[mid] > target){
                    hi = mid - 1;
                } else {
                    lo = mid + 1;
                } 
            } else if(arr[mid] <= arr[hi]){
                // mid to hi is sorted
                if(target > arr[mid] && target <= arr[hi]){
                    lo = mid + 1;
                } else {
                    hi = mid - 1;
                }
            }
        }
        
        return -1;
    }
}

Problem-7: https://leetcode.com/problems/3sum/

class Solution {
    
    public static List<List<Integer>> twoSum(int[] arr, int si, int ei, int target) {
        int l = si;
        int r = ei;
        
        List<List<Integer>> res = new ArrayList<>();
        
        while(l < r){
            
//             if(l != si && arr[l] == arr[l-1]){
//                 l++;
//                 continue;
//             }
            
            int sum = arr[l] + arr[r];
            
            if(sum == target){
                List<Integer> subres = new ArrayList<>();
                subres.add(arr[l]);
                subres.add(arr[r]);
                res.add(subres);
                
                while (l < r && arr[l] == arr[l+1]) l++;
                while (l < r && arr[r] == arr[r-1]) r--;
                
                l++;
                r--;
            } else if(sum > target){
                r--;
            } else {
                l++;
            }
        }
        return res;
    }
    
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        int n = nums.length;
        
        if(n < 3)
            return res;
        
        Arrays.sort(nums);
        
        for(int i = 0; i <= n-3; i++){
            if(i != 0 && nums[i] == nums[i-1])
                continue;
            
            int val = nums[i];
            int tar = 0 - val;
            
            List<List<Integer>> subRes = twoSum(nums, i + 1, n - 1, tar);
            
            for(List<Integer> lst: subRes){
                lst.add(0,val);
                res.add(lst);
            }
        }
        return res;
    }
}