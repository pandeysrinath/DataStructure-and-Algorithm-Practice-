Problem-1: https://practice.geeksforgeeks.org/problems/permutations-in-array1747/1/

class Solution {
    public boolean isPossible(long a[], long b[], int n, long k) {
        // Your code goes here
        Arrays.sort(a);
        Arrays.sort(b);
        
        long sum = 0;
        
        for(int i = 0; i < n; i++){
            sum += a[i] + b[n - i - 1];
            
            if(sum < k){
                return false;
            }
        }
        
        return true;
    }
}

Problem-2: https://practice.geeksforgeeks.org/problems/counting-sort/1/#

class Solution
{
    //Function to arrange all letters of a string in lexicographical 
    //order using Counting Sort.
    public static String countSort(String arr)
    {
        // code here
        StringBuilder sb = new StringBuilder(arr);
        
        // Create frequency array
        int[] freq = new int[26];
        
        // Fill the frequency array
        for(int i = 0; i < arr.length(); i++){
            char ch = arr.charAt(i);
            freq[ch - 'a']++;
        }
        
        // Change frequency array to prefix sum array
        for(int i = 1; i < 26; i++){
            freq[i] = freq[i] + freq[i - 1];
        }
        
        // Form desired indexing
        for(int i = 0; i < 26; i++){
            freq[i]--;
        }
        
        // Form answer with the help of prefix sum array
        for(int i = 0; i < arr.length(); i++){
            char ch = arr.charAt(i);
            sb.setCharAt(freq[ch - 'a']--, ch);
        }
        
        return sb.toString();
    }
}

Problem-3: https://practice.geeksforgeeks.org/problems/common-elements1132/1/

class Solution
{
    ArrayList<Integer> commonElements(int A[], int B[], int C[], int n1, int n2, int n3) 
    {
        // Declare an Array list to store results
        ArrayList<Integer> ans = new ArrayList<>();
        
        int i = 0, j = 0, k = 0;
        
        while(i < n1 && j < n2 && k < n3){
            
            if(A[i] < B[j]) 
                i++;
            else if(A[i] > B[j])
                j++;
            else {
                // This is for checking duplicacy
                if(i > 0 && A[i] == A[i-1]){
                    i++;
                    continue;
                }
                // Now we will search the common element in third array!
                // k<n3 avoids array index out of bound exception
                while(k < n3 && C[k] < B[j])
                    k++;
                
                if(k < n3 && C[k] == B[j]){
                    ans.add(C[k]);
                }
                
                i++;
                j++;
            }
        }
        
        return ans;
    }
}

Problem-4: https://practice.geeksforgeeks.org/problems/searching-in-an-array-where-adjacent-differ-by-at-most-k0456/1#

class Complete{
    // Function for finding maximum and value pair
    public static int search (int arr[], int n, int x, int k) {
        //Complete the function
        int idx = 0;
        
        while(idx < n){
            if(arr[idx] == x){
                return idx;
            } else {
                // difference b/w current and required element
                int diff = Math.abs(arr[idx] - x); 
                //least number of jumps required from current element
                int jumps = diff / k; 
                idx += Math.max(1, jumps);
            }
        }
        return -1;
    }
}

Problem-5: https://www.geeksforgeeks.org/ceiling-in-a-sorted-array/

// Given a sorted array and a value x, the ceiling of x is the smallest element in an array greater than or equal to x, 
// and the floor is the greatest element smaller than or equal to x. Assume that the array is sorted in non-decreasing order. 
// Write efficient functions to find the floor and ceiling of x. 

public class CeilingInSortedArray {
    public static void main(String[] args) {
        int[] arr = new int[]{1,3,4,5,7,9,11,22,33,33,45};
        System.out.println("Index of ceiling value is: " + binarySearch(arr, 44));
    }

    public static int binarySearch(int[] arr, int key){
        int lo = 0, hi = arr.length - 1;

        while(lo <= hi){
            int mid = lo + (hi - lo)/2;
            if(arr[mid] == key){
                return mid;
            } else if(key < arr[mid]){
                hi = mid -1;
            } else{
                lo = mid + 1;
            }
        }
        return lo;
    }
}

Problem-6: https://practice.geeksforgeeks.org/problems/find-pair-given-difference1559/1/

class Solution
{
    public boolean findPair(int arr[], int size, int n)
    {
        //code here.
        Arrays.sort(arr);
        
        int l = 0;
        int r = 1;
        
        while(r < size && l < size){
            int diff = arr[r] - arr[l];
            if(n == 0){
                if(diff == n)
                    return true;
                else{
                    l++;
                    r++;
                    continue;
                }
            } else {
                if(diff < n){
                    r++;
                } else if(diff > n){
                    l++;
                } else {
                    return true;
                }
            }
        }
        
        return false;
    }

Problem-7: https://practice.geeksforgeeks.org/problems/majority-element-1587115620/1/

// Approach-1: Using HashMap

class Solution
{
    static int majorityElement(int arr[], int size)
    {
        // your code here
        HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
              
        for(int i=0; i< arr.length; i++){
    
            if(map.containsKey(arr[i])){
            map.put(arr[i],map.get(arr[i]) + 1);
            }
        
            else{
            map.put(arr[i], 1);
            }
    
        }
            
            
        for (Map.Entry mapElement : map.entrySet()) {
            int key = (int)mapElement.getKey();
            int value = (int)mapElement.getValue();
    
            if(value > arr.length / 2){
                return key;
            }
        }

    return -1;
    }
}

// Approach-2: In O(1) extra space
// Using Mooreâ€™s Voting Algorithm:   

// Approach: This is a two-step process. 
// The first step gives the element that maybe the majority element in the array. If there is a majority element in an array, 
// then this step will definitely return majority element, otherwise, it will return candidate for majority element.
// Check if the element obtained from the above step is majority element. This step is necessary as there might be no majority element.
 
// Algorithm: 
// 1) Loop through each element and maintains a count of majority element, and a majority index, maj_index
// 2) If the next element is same then increment the count if the next element is not same then decrement the count.
// 3) if the count reaches 0 then changes the maj_index to the current element and set the count again to 1.
// 4) Now again traverse through the array and find the count of majority element found.
// 5) If the count is greater than half the size of the array, print the element
// 6) Else print that there is no majority element

class Solution {
    public int majorityElement(int[] nums) {
        int value = validCandidate(nums);
        
        int count = 0;
        
        for(int i = 0; i < nums.length; i++) {
            if(value == nums[i]){
                count++;
            }
        }
        
        if(count > nums.length/2) {
            return value;
        } else {
            return -1;
        }
    }
    
    public static int validCandidate(int[] arr){
        int val = arr[0];
        int count = 1;
        
        for(int i = 1; i < arr.length; i++) {
            if(arr[i] == val) {
                count++;
            } else {
                count--;
            }
            
            if(count == 0) {
                val = arr[i];
                count = 1;
            }
        }
        
        return val;
    }
}

