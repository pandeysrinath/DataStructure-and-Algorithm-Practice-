Problem-1: https://practice.geeksforgeeks.org/problems/first-non-repeating-character-in-a-stream1216/1/#

class Solution
{
    public String FirstNonRepeating(String A)
    {
        // code here
        StringBuilder sb = new StringBuilder();
        HashSet set = new HashSet<>();
        LinkedList  lst = new LinkedList();
        
        for(int i = 0; i < A.length(); i++){
            Object ch = A.charAt(i);
            
            if(set.contains(ch)){
                lst.remove(ch);
            } else {
                set.add(ch);
                lst.addLast(ch);
            }
            
            if(lst.size() > 0){
                sb.append(lst.getFirst() + "");
            } else {
                sb.append("#");
            }
        }
        
        return sb.toString();
    }
}

Problem-2: https://practice.geeksforgeeks.org/problems/the-celebrity-problem/1#

class Solution
{ 
    //Function to find if there is a celebrity in the party or not.
    int celebrity(int M[][], int n)
    {
    	// code here 
    	Stack<Integer> st = new Stack<>();
    	
    	for(int i = 0; i < n; i++){
    	    st.push(i);
    	}
    	
    	while(st.size() > 1){
    	    int p1 = st.pop();
    	    int p2 = st.pop();
    	    
    	    if(M[p1][p2] == 1 || M[p2][p1] == 0){
    	        // p2 may be celebrity
    	        st.push(p2);
    	    } else if(M[p2][p1] == 1 || M[p1][p2] == 0){
    	        // p1 may be celebrity
    	        st.push(p1);
    	    }
    	}
    	
    	int p = st.pop(); // Candidate for celebrety;
    	
    	for(int i = 0; i < n; i++){
    	    if(i != p && (M[p][i] == 1 || M[i][p] == 0))
    	        return -1;
    	}
    	
    	return p;
    }
}

Problem-3: https://practice.geeksforgeeks.org/problems/next-larger-element-1587115620/1

class Solution
{
    //Function to find the next greater element for each element of the array.
    public static long[] nextLargerElement(long[] arr, int n)
    { 
        long[] ans = new long[n];
        
        Stack<Long> st = new Stack<>();
        
        for(int i = n - 1; i >= 0; i--){
            
            while(!st.isEmpty() && st.peek() <= (long)arr[i]){
                st.pop();
            }
            
            if(st.isEmpty()) {
                ans[i] = -1;
            } else {
                ans[i] = (long)st.peek();
            }
              
            st.push((long)arr[i]);
        }
        
        return ans;
    } 
}

Problem-4: https://practice.geeksforgeeks.org/problems/distance-of-nearest-cell-having-1-1587115620/1

class Solution
{
    //Function to find distance of nearest 1 in the grid for each cell.
    
    class Pair
    {
      int i, j;
      Pair(int i,int j) {
          this.i = i;
          this.j = j;
          
      }
    }
    
    public int[][] nearest(int[][] grid) {
        // Code here
        int r = grid.length;
        int c = grid[0].length;
        
        Queue<Pair> q = new LinkedList<>();
        
        int[][] ans = new int[r][c];
        for(int i = 0; i < r; i++) {
            for(int j = 0; j < c; j++) {
                if(grid[i][j] == 1){
                   ans[i][j] = 0;
                   Pair x = new Pair(i,j);
                   q.add(x);
                }
                else
                    ans[i][j] = Integer.MAX_VALUE;
            }
        }
        
        // Using BFS
        while(!q.isEmpty()) {
            int i = q.peek().i;
            int j = q.peek().j;
          
            if(i - 1 >= 0 && ans[i][j] + 1 < ans[i - 1][j]) {
                ans[i - 1][j] = ans[i][j] + 1;
                Pair p = new Pair(i - 1, j);
                q.add(p);
            }
            
            if(j - 1 >= 0 && ans[i][j] + 1 < ans[i][j - 1]) {
                ans[i][j - 1] = ans[i][j] + 1;
                Pair p = new Pair(i, j - 1);
                q.add(p);
            }
            
            if(i + 1 < r && ans[i][j] + 1 < ans[i + 1][j]){
                ans[i + 1][j] = ans[i][j] + 1;
                Pair p = new Pair(i + 1, j);
                q.add(p);
            }
          
            if(j + 1 < c  && ans[i][j] + 1 < ans[i][j + 1]){
                ans[i][j + 1] = ans[i][j] + 1;
                Pair p = new Pair(i, j + 1);
                q.add(p);
            }
            
            q.remove();
        }
      
        return ans;
    }
}

Problem-5: https://practice.geeksforgeeks.org/problems/rotten-oranges2536/1

class Solution
{
    class Pair
    {
        int i, j;
        Pair(int i,int j) {
            this.i = i;
            this.j = j;
          
        }
    }
    
    //Function to find minimum time required to rot all oranges. 
    public int orangesRotting(int[][] grid)
    {
        // Code here
        int totalOranges = 0;
        Queue<Pair> q = new ArrayDeque<>();
        int minTime = 0;
        int currRotOranges = 0;
        
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] != 0){
                    totalOranges++;
                }
                if(grid[i][j] == 2){
                    Pair p = new Pair(i, j);
                    q.offer(p);
                }
            }
        }
        
        if(totalOranges == 0)
            return 0;
        
        // bfs starting from initially rotten oranges
        while(!q.isEmpty()){
            
            int size = q.size();
            currRotOranges += size;
            
            for(int i = 0; i < size; i++){
                Pair p = q.poll();
                int r = p.i;
                int c = p.j;
                
                if(r - 1 >= 0 && grid[r - 1][c] == 1){
                    grid[r - 1][c] = 2;
                    q.offer(new Pair(r - 1, c)); 
                }
                   
                if(r + 1 < grid.length && grid[r + 1][c] == 1){
                    grid[r + 1][c] = 2;
                    q.offer(new Pair(r + 1, c)); 
                }
                    
                    
                if(c - 1 >= 0 && grid[r][c - 1] == 1){
                    grid[r][c - 1] = 2;
                    q.offer(new Pair(r, c - 1)); 
                }
                    
                    
                if(c + 1 < grid[0].length && grid[r][c + 1] == 1){
                    grid[r][c + 1] = 2;
                    q.offer(new Pair(r, c + 1)); 
                }
            }
            
            if(q.size() != 0)
                minTime++;
        }
        
        if(currRotOranges != totalOranges)
            return -1;
            
        return minTime;
    }
}

Problem-7: https://www.geeksforgeeks.org/next-smaller-element/

class Complete{
    // Function for finding maximum and value pair
    public static int[] Smallestonleft (int arr[], int n) {
        // Complete the function
        TreeSet<Integer> ts = new TreeSet<Integer>();
        int[] ans = new int[n];
        ans[0] = -1;
        ts.add(arr[0]);
        
        for(int i = 1; i < n; i++) {
            Integer v = ts.lower(arr[i]);
            if(v == null)
              ans[i] = -1;
            else
              ans[i] = v;
              
            ts.add(arr[i]);
        }
        
        return ans;
    }
 
}


Problem-8: https://practice.geeksforgeeks.org/problems/circular-tour/1 

class Solution
{
    //Function to find starting point where the truck can start to get through
    //the complete circle without exhausting its petrol in between.
    int tour(int petrol[], int distance[]) {
	    // Your code here
	    int n = petrol.length;
        int deficit = 0;
        int balance = 0;
        int start = 0;
        for(int i = 0; i < n ; i++){
            balance += petrol[i] - distance[i];
            if(balance < 0){
                deficit += balance;
                start = i + 1;
                balance = 0;
            }
       }
       
        if(deficit + balance >= 0)
           return start;
        else 
           return -1;
    }
}