Problem-1: https://www.geeksforgeeks.org/make-array-elements-equal-minimum-cost/

import java.io.*;
import java.util.*;

class GFG{

    // This function assumes that a[] is
    // sorted. If a[] is not sorted, we need
    // to sort it first.
    public static int minCostToMakeElementEqual(int a[], int n) {
        
        // If there are odd elements, we choose
        // middle element
        int y;
        
        if (n % 2 == 1)
            y = a[n / 2];
        
        // If there are even elements, then we
        // choose the average of middle two.
        else
            y = (a[n / 2] + a[(n - 2) / 2]) / 2;
        
        // After deciding the final value,
        // find the result.
        int s = 0;
        
        for(int i = 0; i < n; i++)
            s += Math.abs(a[i] - y);
        
        return s;
    }

    // Driver code
    public static void main (String[] args)
    {
        int a[] = { 1, 100, 101 };
        int n = a.length;
        
        System.out.println(minCostToMakeElementEqual(a, n));
    }
}

Problem-2: https://www.geeksforgeeks.org/check-reversing-sub-array-make-array-sorted/

// Optimal Solution:

// TC : O(n), SC: O(1)

// Observe, that the answer will be True when the array is already sorted or when the array consists of three parts. 
// The first part is increasing subarray, then decreasing subarray, and then again increasing subarray. So, 
// we need to check that array contains increasing elements then some decreasing elements, 
// and then increasing elements if this is the case the answer will be True. In all other cases, the answer will be False.


// Note: Simply finding the three parts does not guarantee the answer to be True eg consider
//  arr [] = {10,20,30,40,4,3,2,50,60,70} 
// The answer would be False in this case although we are able to find three parts. We will be handling the validity of the 
// three parts in the code below.

// Java program to check whether reversing a sub array
// make the array sorted or not

class GFG {

// Return true, if reversing the subarray will sort t
// he array, else return false.
	static boolean checkReverse(int arr[], int n) {
		if (n == 1) {
			return true;
		}

		// Find first increasing part
		int i;
		for (i = 1; arr[i - 1] < arr[i] && i < n; i++);
		if (i == n) {
			return true;
		}

		// Find reversed part
		int j = i;
		while (j < n && arr[j] < arr[j - 1]) {
			if (i > 1 && arr[j] < arr[i - 2]) {
				return false;
			}
			j++;
		}

		if (j == n) {
			return true;
		}

		// Find last increasing part
		int k = j;

		// To handle cases like {1,2,3,4,20,9,16,17}
		if (arr[k] < arr[i - 1]) {
			return false;
		}

		while (k > 1 && k < n) {
			if (arr[k] < arr[k - 1]) {
				return false;
			}
			k++;
		}
		return true;
	}

// Driven Program
	public static void main(String[] args) {

		int arr[] = {1, 3, 4, 10, 9, 8};
		int n = arr.length;

		if (checkReverse(arr, n)) {
			System.out.print("Yes");
		} else {
			System.out.print("No");
		}
	}
}

Problem-3: https://practice.geeksforgeeks.org/problems/find-all-four-sum-numbers1732/1#

TC: O(n^3)
SC: O(N^2)

// Using LinkedHashSet, because it does not contains duplicate

class Solution {
    public ArrayList<ArrayList<Integer>> fourSum(int[] arr, int sum) {
        // code here
        Set<ArrayList<Integer>> set = new LinkedHashSet<ArrayList<Integer>>();
        
        Arrays.sort(arr);
        
        for(int i = 0; i < arr.length - 3; i++){
            int pair3sum = sum - arr[i];
                
            for (int j = i + 1 ; j < arr.length - 2; j++){
                int pair2Sum = pair3sum - arr[j];
                int lo = j + 1;
                int hi = arr.length - 1;
                while(lo < hi){
                    int currSum = arr[lo] + arr[hi];
                    if(currSum > pair2Sum){
                        hi--;
                    } else {
                        if(currSum == pair2Sum){
                            ArrayList<Integer> lst = new ArrayList<>();
                            lst.add(arr[i]);
                            lst.add(arr[j]);
                            lst.add(arr[lo]);
                            lst.add(arr[hi]);
                            set.add(lst);
                        }
                        lo++;
                    }
                }
            }
        }
            
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>(set);
        return ans;

    }
}

Problem-4: https://www.geeksforgeeks.org/median-of-two-sorted-arrays/

Problem-5: https://www.geeksforgeeks.org/median-of-two-sorted-arrays-of-different-sizes/

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // Because we use binary search on nums1 array and on the basis of that we select left part
        // from nums1 and nums2, if we select antire left part from nums1 then it creates problem
        // so, nums1.length <= nums.length
        if(nums1.length > nums2.length){
            int[] temp = nums1;
            nums1 = nums2;
            nums2 = temp;
        }
        
        int lo = 0, hi = nums1.length, tl = nums2.length + nums1.length;
        
        while(lo <= hi){
            int aleft = lo + (hi - lo)/2;
            int bleft = (tl + 1)/2 - aleft;
            
            int alm1 = (aleft == 0) ? Integer.MIN_VALUE : nums1[aleft - 1];
            int al = (aleft == nums1.length) ? Integer.MAX_VALUE : nums1[aleft];
             
            int blm1 = (bleft == 0) ? Integer.MIN_VALUE : nums2[bleft - 1];
            int bl = (bleft == nums2.length) ? Integer.MAX_VALUE : nums2[bleft];
            
            // Valid segregation
            if(alm1 <= bl && blm1 <= al){
                double median = 0.0;
                
                if(tl % 2 == 0){
                    int lmax = Math.max(alm1, blm1);
                    int rmin = Math.min(al, bl);
                    median = (lmax + rmin) / 2.0;
                } else {
                    int lmax = Math.max(alm1, blm1);
                    median = lmax;
                }
                return median;
            } else {
                if(alm1 > bl){
                    // There are more elements to be picked in left part of nums2 array
                    hi = aleft - 1;
                } else if(blm1 > al) {
                    // There are more elements to be picked in left part of nums1 array
                    lo = aleft + 1;
                }
            }
        }
        
        return -1;

    }
}

Problem-6: https://practice.geeksforgeeks.org/problems/find-median-in-a-stream-1587115620/1

class Solution
{
    static PriorityQueue<Integer> minHeap = new PriorityQueue<>();
    static PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);
    
    //Function to insert heap.
    public static void insertHeap(int x)
    {
        // add your code here
        if(maxHeap.size() == 0){
            maxHeap.offer(x);
            return;
        }
        
        if(minHeap.size() != 0 && x > minHeap.peek()){
            minHeap.offer(x);
        } else {
            maxHeap.offer(x);
        }
        
        balanceHeaps();
    }
    
    //Function to balance heaps.
    public static void balanceHeaps()
    {
       // add your code here
       if(minHeap.size() > maxHeap.size()){
           int val = minHeap.poll();
           maxHeap.offer(val);
       } else if(maxHeap.size() - minHeap.size() > 1){
           int val = maxHeap.poll();
           minHeap.offer(val);
       }
    }
    
    //Function to return Median.
    public static double getMedian()
    {
        // add your code here
        if(maxHeap.size() == 1 && minHeap.size() == 0)
            return maxHeap.peek();
            
        if(maxHeap.size() > minHeap.size()){
            return maxHeap.peek();
        } else {
            return (double)(maxHeap.peek() + minHeap.peek()) / 2;
        }
    }
    
}

Problem-7: https://practice.geeksforgeeks.org/problems/zero-sum-subarrays1825/1/

class Solution{
    //Function to count subarrays with sum equal to 0.
    public static long findSubarray(long[] arr ,int n) 
    {
        //Your code here
        HashMap<Long, Long> map = new HashMap<>();
        
        int i = -1;
        long count = 0;
        long sum = 0;
        map.put((long)0, (long)1);
        
        while(i < n - 1){
            i++;
            sum += arr[i];
            
            if(map.containsKey(sum)){
                count += map.get(sum);
                map.put(sum, map.get(sum) + 1);
            } else {
                map.put(sum, (long)1);
            }
        }
        
        return count;
    }
}

Problem-8: https://leetcode.com/problems/subarray-sum-equals-k/

class Solution {
    public int subarraySum(int[] nums, int k) {
        HashMap<Integer, Integer> fmap = new HashMap<>();
        
        int ans = 0;
        int sum = 0;
        
        fmap.put(sum, 1);
        
        for(int i = 0; i < nums.length; i++){
            sum += nums[i];
            int targetSum = sum - k;
            
            if(fmap.containsKey(targetSum)){
                ans += fmap.get(targetSum); 
            }
            
            fmap.put(sum, fmap.getOrDefault(sum, 0) + 1);
        }
        
        return ans;
    }
}

